# üêç Importar paquetes de Python
import streamlit as st
import requests
#from snowflake.snowpark.functions import col
from snowflake.snowpark.exceptions import SnowparkClientException # Importaci√≥n necesaria para el manejo de errores

# üñ•Ô∏è Mostrar t√≠tulo y subt√≠tulo
st.title(":cup_with_straw: ¬°Personaliza tu Batido! :cup_with_straw:")
st.write(
    """
    **¬°Elige las frutas que quieres en tu Batido personalizado!**
    """
)

# üßë‚Äçüíª Entrada del nombre del cliente
name_on_order = st.text_input('Nombre en el Batido:')
st.write('El nombre en tu Batido ser√°:', name_on_order)

# üì• Conexi√≥n a Snowflake y carga de datos
# CAMBIO: Manejo robusto de la conexi√≥n a Snowflake.
# El c√≥digo original de GitHub ten√≠a 'session = cnx.session()', lo cual causaba el AttributeError.
# La forma correcta es acceder al atributo '.session' del objeto de conexi√≥n.
try:
    conn = st.connection("snowflake")
    session = conn.session # CORRECCI√ìN CLAVE: Acceder a 'session' como un atributo, no como una funci√≥n.
except SnowparkClientException as e:
    st.error(f"Error al conectar con Snowflake: {e}. Aseg√∫rate de que tu configuraci√≥n de conexi√≥n es correcta.")
    st.stop() # Detener la ejecuci√≥n si no se puede conectar

# Seleccionar solo la columna con los nombres de frutas
my_dataframe = session.table("smoothies.public.fruit_options").select(col("FRUIT_NAME"))
fruit_options = my_dataframe.to_pandas()["FRUIT_NAME"].tolist()  # Convertir a lista de strings

# üßÉ Selecci√≥n de ingredientes con l√≠mite de 5 frutas
# CAMBIO: Ajuste de 'max_selections' para limitar correctamente a 5.
# El c√≥digo de GitHub ten√≠a 'max_selections=6' que permit√≠a 6 selecciones.
ingredients_list = st.multiselect(
    'Elige hasta 5 ingredientes:',
    fruit_options,
    max_selections=5  # CORRECCI√ìN: Cambiado a 5 para limitar a 5 selecciones
)

# üîÅ Formatear ingredientes seleccionados como string y mostrar informaci√≥n nutricional
if ingredients_list:
    # CAMBIO: Uso de ', '.join() para una construcci√≥n de cadena m√°s limpia y robusta.
    # El c√≥digo de GitHub usaba concatenaci√≥n en un bucle, que es menos eficiente y propenso a errores.
    ingredients_string = ', '.join(ingredients_list) 

    # --- Nueva secci√≥n para mostrar informaci√≥n nutricional de las frutas ---
    st.subheader("Informaci√≥n Nutricional de los Ingredientes:")
    for fruit_chosen in ingredients_list:
        st.write(f"**{fruit_chosen}**") # Muestra el nombre de la fruta

        # CAMBIO: Implementaci√≥n de manejo robusto de llamadas a API.
        # El c√≥digo de GitHub llamaba directamente a .json() sin verificar la respuesta,
        # lo que causaba el JSONDecodeError si la API no devolv√≠a JSON v√°lido o un error.
        # Tambi√©n se asegura el uso de la URL de SmoothieFroot.
        api_url = f"https://my.smoothiefroot.com/api/fruit/{fruit_chosen.lower()}" # Uso de .lower() para URLs amigables
        
        try:
            smoothiefroot_response = requests.get(api_url)
            
            # Verificaci√≥n del c√≥digo de estado HTTP (200 = OK)
            if smoothiefroot_response.status_code == 200:
                try:
                    # Intenta parsear la respuesta como JSON
                    nutrition_data = smoothiefroot_response.json()
                    st.dataframe(data=nutrition_data, use_container_width=True)
                except requests.exceptions.JSONDecodeError:
                    # Mensaje de advertencia si la respuesta no es JSON v√°lido
                    st.warning(f"No se pudo decodificar la respuesta JSON para {fruit_chosen}. La API podr√≠a no estar devolviendo JSON v√°lido.")
                    st.text(smoothiefroot_response.text) # Muestra la respuesta cruda para depuraci√≥n
            else:
                # Mensaje de advertencia si la API devuelve un c√≥digo de estado de error
                st.warning(f"Error al obtener datos nutricionales para {fruit_chosen}: C√≥digo de estado {smoothiefroot_response.status_code}. URL: {api_url}")
                st.text(smoothiefroot_response.text) # Muestra la respuesta cruda para depuraci√≥n
        except requests.exceptions.RequestException as e:
            # Mensaje de error para problemas de conexi√≥n o de red
            st.error(f"Error de conexi√≥n al intentar obtener datos nutricionales para {fruit_chosen}: {e}. Verifica la URL de la API y tu conexi√≥n a internet.")
        st.markdown("---") # Separador para cada fruta
    # --- Fin de la nueva secci√≥n ---

    # üì§ Crear el statement SQL de inserci√≥n
    # CAMBIO: La creaci√≥n de my_insert_stmt y el bot√≥n de env√≠o se movieron fuera del bucle de ingredientes.
    # En el c√≥digo de GitHub, estaban dentro del bucle, lo que los crear√≠a m√∫ltiples veces.
    my_insert_stmt = f"""
        insert into smoothies.public.orders (ingredients, name_on_order)
        values ('{ingredients_string}', '{name_on_order}')
    """

    # ‚è© Bot√≥n para enviar pedido
    # CAMBIO: Texto del bot√≥n en espa√±ol para consistencia.
    time_to_insert = st.button('Enviar Pedido') 

    if time_to_insert:
        try:
            session.sql(my_insert_stmt).collect()
            st.success("¬°Tu Batido ha sido ordenado, " + name_on_order + "!")
        except Exception as e:
            st.error(f"Error al enviar el pedido: {e}. Por favor, int√©ntalo de nuevo.")
else:
    st.info("Por favor, selecciona al menos un ingrediente para tu batido.")

