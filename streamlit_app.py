# üêç Importar paquetes de Python
import streamlit as st
import requests
import pandas as pd # Aseg√∫rate de que pandas est√© importado
from snowflake.snowpark.functions import col
from snowflake.snowpark.exceptions import SnowparkClientException # Necesario para el manejo de errores de conexi√≥n

# üñ•Ô∏è Mostrar t√≠tulo y subt√≠tulo
st.title(":cup_with_straw: ¬°Personaliza tu Batido! :cup_with_straw:") # Traducido al espa√±ol
st.write(
    """
    **¬°Elige las frutas que quieres en tu Batido personalizado!** # Traducido al espa√±ol
    """
)

# üßë‚Äçüíª Entrada del nombre del cliente
name_on_order = st.text_input('Nombre en el Batido:') # Traducido al espa√±ol
st.write('El nombre en tu Batido ser√°:', name_on_order) # Traducido al espa√±ol

# üì• Conexi√≥n a Snowflake y carga de datos
try:
    cnx = st.connection("snowflake")
    session = cnx.session # CORRECCI√ìN: Acceder a 'session' como atributo, no como m√©todo.
except SnowparkClientException as e:
    st.error(f"Error al conectar con Snowflake: {e}. Aseg√∫rate de que tu configuraci√≥n de conexi√≥n es correcta.")
    st.stop() # Detener la ejecuci√≥n si no se puede conectar

# Seleccionar las columnas FRUIT_NAME y SEARCH_ON
my_dataframe = session.table("smoothies.public.fruit_options").select(col('FRUIT_NAME'), col('SEARCH_ON'))

# Convertir el Snowpark DataFrame a un Pandas DataFrame para usar .loc
pd_df = my_dataframe.to_pandas()

# CORRECCI√ìN: Descomentar y definir 'fruit_options' aqu√≠.
# 'fruit_options' se usa en st.multiselect, por lo que debe estar definida antes.
fruit_options = pd_df["FRUIT_NAME"].tolist()

# üßÉ Selecci√≥n de ingredientes con l√≠mite de 5 frutas
ingredients_list = st.multiselect(
    'Elige hasta 5 ingredientes:', # Traducido al espa√±ol
    fruit_options,
    max_selections=5  # CORRECCI√ìN: Cambiado a 5 para limitar a 5 selecciones.
)

# üîÅ Formatear ingredientes seleccionados como string y mostrar informaci√≥n nutricional
if ingredients_list:
    # CORRECCI√ìN: Construir ingredients_string con ', '.join() fuera del bucle de visualizaci√≥n.
    # Esto asegura que la cadena se construya una sola vez y correctamente para la inserci√≥n.
    ingredients_string = ', '.join(ingredients_list)

    # --- Secci√≥n para mostrar informaci√≥n nutricional de las frutas ---
    st.subheader("Informaci√≥n Nutricional de los Ingredientes:") # Traducido al espa√±ol
    for fruit_chosen in ingredients_list:
        st.write(f"**{fruit_chosen}**") # Muestra el nombre de la fruta

        # Obtener el valor de SEARCH_ON para la fruta elegida
        # Aseg√∫rate de que 'pd_df' contenga la columna 'SEARCH_ON' y 'FRUIT_NAME'.
        try:
            search_on = pd_df.loc[pd_df['FRUIT_NAME'] == fruit_chosen, 'SEARCH_ON'].iloc[0]
        except IndexError:
            st.warning(f"No se encontr√≥ el valor SEARCH_ON para '{fruit_chosen}'.")
            search_on = fruit_chosen.lower() # Fallback a fruit_chosen en min√∫sculas

        # CORRECCI√ìN: Usar la URL base correcta (my.smoothiefroot.com) y el valor 'search_on'.
        # Se a√±adi√≥ manejo de errores para la llamada a la API.
        api_url = f"https://my.smoothiefroot.com/api/fruit/{search_on}"
        
        try:
            smoothiefroot_response = requests.get(api_url)
            
            if smoothiefroot_response.status_code == 200:
                try:
                    nutrition_data = smoothiefroot_response.json()
                    st.dataframe(data=nutrition_data, use_container_width=True)
                except requests.exceptions.JSONDecodeError:
                    st.warning(f"No se pudo decodificar la respuesta JSON para {fruit_chosen}. La API podr√≠a no estar devolviendo JSON v√°lido.")
                    st.text(smoothiefroot_response.text) # Muestra la respuesta cruda para depuraci√≥n
            else:
                st.warning(f"Error al obtener datos nutricionales para {fruit_chosen}: C√≥digo de estado {smoothiefroot_response.status_code}. URL: {api_url}")
                st.text(smoothiefroot_response.text) # Muestra la respuesta cruda para depuraci√≥n
        except requests.exceptions.RequestException as e:
            st.error(f"Error de conexi√≥n al intentar obtener datos nutricionales para {fruit_chosen}: {e}. Verifica la URL de la API y tu conexi√≥n a internet.")
        st.markdown("---") # Separador para cada fruta
    # --- Fin de la secci√≥n de informaci√≥n nutricional ---

    # üì§ Crear el statement SQL de inserci√≥n
    # CORRECCI√ìN: Movido fuera del bucle de visualizaci√≥n de ingredientes.
    # Esto asegura que la sentencia SQL se cree una sola vez con todos los ingredientes.
    my_insert_stmt = f"""
        insert into smoothies.public.orders (ingredients, name_on_order)
        values ('{ingredients_string}', '{name_on_order}')
    """

    # ‚è© Bot√≥n para enviar pedido
    time_to_insert = st.button('Enviar Pedido') # Traducido al espa√±ol

    if time_to_insert:
        try:
            session.sql(my_insert_stmt).collect()
            st.success("¬°Tu Batido ha sido ordenado, " + name_on_order + "!") # Traducido al espa√±ol
        except Exception as e:
            st.error(f"Error al enviar el pedido: {e}. Por favor, int√©ntalo de nuevo.") # Traducido al espa√±ol
else:
    st.info("Por favor, selecciona al menos un ingrediente para tu batido.") # Traducido al espa√±ol

